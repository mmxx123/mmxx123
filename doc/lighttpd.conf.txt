/ # cat /usr/local/httpd/lighttpd.conf
# lighttpd configuration file
#
# use it as a base for lighttpd 1.0.0 and above
#
# $Id: lighttpd.conf,v 1.7 2004/11/03 22:26:05 weigon Exp $

############ Options you really have to take care of ####################

## modules to load
# at least mod_access and mod_accesslog should be loaded
# all other module should only be loaded if really neccesary
# - saves some time
# - saves memory
server.modules              = (
                                "mod_rewrite",
                                "mod_redirect",
#                               "mod_alias",
                                "mod_access",
                                "mod_openssl",
#                               "mod_trigger_b4_dl",
#                               "mod_auth",
#                               "mod_status",
                                "mod_setenv",
                                "mod_fastcgi",
#                               "mod_proxy",
#                               "mod_simple_vhost",
#                               "mod_evhost",
#                               "mod_userdir",
                                "mod_cgi",
#                               "mod_compress",
#                               "mod_ssi",
#                               "mod_usertrack",
#                               "mod_expire",
#                               "mod_secdownload",
#                               "mod_rrdtool",
#                               "mod_websocket",
                                "mod_wstunnel",
#                               "mod_accesslog"
                               )

$HTTP["url"] =~ "^/" {
    wstunnel.frame-type = "binary"
    wstunnel.server = (
        "" => ((
            "host"  => "::1",
            "port"  => "63630",
            "proto" => "tcp",
        ))
    )
}

$HTTP["url"] =~ "^/vm" {
    wstunnel.frame-type = "binary"
    wstunnel.server = (
        "" => ((
            "host"  => "::1",
            "port"  => "63631",
            "proto" => "tcp",
        ))
    )
}

## A static document-root. For virtual hosting take a look at the
## mod_simple_vhost module.
server.document-root        = "/web/"

## where to send error-messages to
server.errorlog             = "/tmp/httpd/lighttpd_error.log"

server.network-backend      = "write"
server.upload-dirs          = ("/tmp")

server.stream-response-body = 2
server.stream-request-body  = 2

# files to check for if .../ is requested
index-file.names            = ("cgi/login_oem.cgi", "cgi/url_redirect.cgi", "index.cgi","index.fcgi")

## set the event-handler (read the performance section in the manual)
# server.event-handler = "freebsd-kqueue" # needed on OS X

# mimetype mapping
mimetype.assign             = (
  ".jnlp"         =>      "application/x-java-jnlp-file",
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".json"         =>      "application/json; charset=UTF-8",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jar"          =>      "application/x-java-archive",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html; charset=UTF-8",
  ".htm"          =>      "text/html; charset=UTF-8",
  ".js"           =>      "text/javascript; charset=UTF-8",
  ".asc"          =>      "text/plain; charset=UTF-8",
  ".c"            =>      "text/plain; charset=UTF-8",
  ".cpp"          =>      "text/plain; charset=UTF-8",
  ".log"          =>      "text/plain; charset=UTF-8",
  ".conf"         =>      "text/plain; charset=UTF-8",
  ".text"         =>      "text/plain; charset=UTF-8",
  ".txt"          =>      "text/plain; charset=UTF-8",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "application/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",
  "$metadata"     =>      "application/xml",
  # default mime type
  ""              =>      "application/octet-stream",
 )

# Use the "Content-Type" extended attribute to obtain mime type if possible
#mimetype.use-xattr        = "enable"


## send a different Server: header
## be nice and keep it at lighttpd
server.tag                 = ""

#### accesslog module
#accesslog.filename          = "/tmp/lighttpd/access.log"

## deny access the file-extensions
#
# ~    is for backupfiles from vi, emacs, joe, ...
# .inc is often used for code includes which should in general not be part
#      of the document-root
#url.access-deny             = ( "~", ".inc" )
$HTTP["scheme"] == "http" {
    $HTTP["url"] =~ "^/redfish/" {
        url.access-deny = ("")
    }
}

setenv.add-response-header += ("Strict-Transport-Security" => "max-age=31536000; includeSubdomains")
setenv.add-response-header += ("X-XSS-Protection" => "1; mode=block")
setenv.add-response-header += ("Content-Security-Policy" => "default-src 'self';" +
                               "connect-src 'self' ws: wss:;" +
                               "frame-src 'self';" +
                               "img-src 'self' data:;" +
                               "object-src 'self';" +
                               "font-src 'self' data:;" +
                               "script-src 'self' 'unsafe-inline' 'unsafe-eval';" +
                               "style-src 'self' 'unsafe-inline';" +
                               "worker-src 'self' blob:;")
setenv.add-response-header += ("Cache-Control" => "private")

$HTTP["scheme"] == "https" {
    setenv.add-response-header += ("X-Frame-Options"=>"SAMEORIGIN")
    $HTTP["querystring"] !~ "Snapshot" {
        setenv.add-response-header += ("X-Content-Type-Options"=>"nosniff")
    }
    $HTTP["url"] =~ "^/redfish/" {
        setenv.add-response-header += ("X-Content-Type-Options"=>"nosniff")
        setenv.add-response-header += ("OData-Version" => "4.0")
    }
}

#$HTTP["url"] =~ "\.pdf$" {
#  server.range-requests = "disable"
#}

##
# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = (".php", ".pl", ".fcgi", ".cgi",
                                  ".Cancel", ".ChangePassword", ".CreateVolume", ".ClearAllPolicies", ".ClearLog", ".ClearVolumes", ".ClearAcknowledgements", ".CreateDump",
                                  ".Delete", ".Download",".DeleteAll",".Generate",
                                  ".CreateVD", ".DeleteVD",
                                  ".RebuildVD", ".ImportVD",
                                  ".EnjectMedia", ".EnterUpdateMode", ".Export",
                                  ".IKVM", ".Import", ".Indicate", ".InsertMedia",
                                  ".Reset", ".ResetBios", ".ResetKeys",
                                  ".Save", ".SubmitTestEvent", ".SimpleUpdate", ".SecureErase", ".SecureEraseAbort",
                                  ".Update", ".Upload", ".Install", ".StartUpdate",
                                  ".Rekey", ".Renew", ".GenerateCSR", ".ReplaceCertificate",
                                  ".CleanData"
                                  )

######### Options that are good to be but not neccesary to be changed #######

## bind to port (default: 80)

## bind to localhost (default: all interfaces)
#server.bind                = "127.0.0.1"

## error-handler for status 404
#server.error-handler-404   = "/error-handler.html"
#server.error-handler-404   = "/error-handler.php"

## to help the rc.scripts
#server.pid-file            = "/var/run/lighttpd.pid"


###### virtual hosts
##
##  If you want name-based virtual hosting add the next three settings and load
##  mod_simple_vhost
##
## document-root =
##   virtual-server-root + virtual-server-default-host + virtual-server-docroot
## or
##   virtual-server-root + http-host + virtual-server-docroot
##
#simple-vhost.server-root   = "/srv/www/vhosts/"
#simple-vhost.default-host  = "www.example.org"
#simple-vhost.document-root = "/htdocs/"


##
## Format: <errorfile-prefix><status-code>.html
## -> ..../status-404.html for 'File not found'
#server.errorfile-prefix    = "/usr/share/lighttpd/errors/status-"
#server.errorfile-prefix    = "/srv/www/errors/status-"

## virtual directory listings
#dir-listing.activate       = "enable"
## select encoding for directory listings
#dir-listing.encoding        = "utf-8"

## enable debugging
#debug.log-request-header   = "enable"
#debug.log-response-header  = "enable"
#debug.log-request-handling = "enable"
#debug.log-file-not-found   = "enable"

### only root can use these options
#
# chroot() to directory (default: no chroot() )
#server.chroot              = "/"

## change uid to <uid> (default: don't care)
#server.username            = "wwwrun"

## change uid to <uid> (default: don't care)
#server.groupname           = "wwwrun"

#### compress module
#compress.cache-dir         = "/var/cache/lighttpd/compress/"
#compress.filetype          = ("text/plain", "text/html")

#### proxy module
## read proxy.txt for more info
#proxy.server               = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "host" => "192.168.0.101",
#                                   "port" => 80
#                                 )
#                               )
#                             )

#### fastcgi module
## read fastcgi.txt for more info
## for PHP don't forget to set cgi.fix_pathinfo = 1 in the php.ini
#fastcgi.server             = ( ".php" =>
#                               ( "localhost" =>
#                                 (
#                                   "socket" => "/var/run/lighttpd/php-fastcgi.socket",
#                                   "bin-path" => "/usr/local/bin/php-cgi"
#                                 )
#                               )
#                            )

#### CGI module
cgi.assign                 = ( ".pl"  => "/web/perl",
                               ".cgi" => "",
                               ".Cancel" => "",
                               ".ChangePassword" => "",
                               ".ClearAllPolicies" => "",
                               ".ClearLog" => "",
                               ".ClearAcknowledgements" => "",
                               ".ClearVolumes" => "",
                               ".CreateVD" => "",
                               ".CreateVolume" => "",
                               ".CreateDump" => "",
                               ".Delete" => "",
                               ".DeleteVD" => "",
                               ".DeleteAll" => "",
                               ".RebuildVD" => "",
                               ".ImportVD" => "",
                               ".Download" => "",
                               ".Generate" => "",
                               ".EjectMedia" => "",
                               ".EnterUpdateMode" => "",
                               ".Export" => "",
                               ".IKVM" => "",
                               ".Import" => "",
                               ".Indicate" => "",
                               ".InsertMedia" => "",
                               ".Reset" => "",
                               ".ResetBios" => "",
                               ".ResetKeys" => "",
                               ".Save" => "",
                               ".SubmitTestEvent" => "",
                               ".SimpleUpdate" => "",
                               ".SecureErase" => "",
                               ".SecureEraseAbort" => "",
                               ".Update" => "",
                               ".Upload" => "",
                               ".Install" => "",
                               ".StartUpdate" => "",
                               ".Rekey" => "",
                               ".Renew" => "",
                               ".GenerateCSR" => "",
                               ".ReplaceCertificate" => "",
                               ".CleanData" => ""
                             )
fastcgi.map-extensions     = ( ".Cancel" => ".fcgi",
                               ".ChangePassword" => ".fcgi",
                               ".ClearAllPolicies" => ".fcgi",
                               ".ClearLog" => ".fcgi",
                               ".ClearAcknowledgements" => ".fcgi",
                               ".ClearVolumes" => ".fcgi",
                               ".CreateVD" => ".fcgi",
                               ".CreateVolume" => ".fcgi",
                               ".CreateDump" => ".fcgi",
                               ".Delete" => ".fcgi",
                               ".DeleteVD" => ".fcgi",
                               ".DeleteAll" => ".fcgi",
                               ".RebuildVD" => ".fcgi",
                               ".ImportVD" => ".fcgi",
                               ".Download" => ".fcgi",
                               ".Generate" => ".fcgi",
                               ".EjectMedia" => ".fcgi",
                               ".EnterUpdateMode" => ".fcgi",
                               ".Export" => ".fcgi",
                               ".Import" => ".fcgi",
                               ".Indicate" => ".fcgi",
                               ".InsertMedia" => ".fcgi",
                               ".Reset" => ".fcgi",
                               ".ResetBios" => ".fcgi",
                               ".ResetKeys" => ".fcgi",
                               ".Save" => ".fcgi",
                               ".SubmitTestEvent" => ".fcgi",
                               ".SimpleUpdate" => ".fcgi",
                               ".SecureErase" => ".fcgi",
                               ".SecureEraseAbort" => ".fcgi",
                               ".Update" => ".fcgi",
                               ".Upload" => ".fcgi",
                               ".Install" => ".fcgi",
                               ".StartUpdate" => ".fcgi",
                               ".Rekey" => ".fcgi",
                               ".Renew" => ".fcgi",
                               ".GenerateCSR" => ".fcgi",
                               ".ReplaceCertificate" => ".fcgi",
                               ".CleanData" => ".fcgi"
                             )
fastcgi.server = (
    ".fcgi" => (
      "fastcgi.handler" => (
        "socket" => "/tmp/fcgi.socket",
        "check-local" => "disable",
        "bin-path" => "/tmp/web/bin/index.fcgi",
        "max-procs" => 1,
      )
    )
  )

#
#server.use-ipv6 = "enable"

#### SSL engine
#### status module
#status.status-url          = "/server-status"
#status.config-url          = "/server-config"

#### auth module
## read authentication.txt for more info
#auth.backend               = "plain"
#auth.backend.plain.userfile = "lighttpd.user"
#auth.backend.plain.groupfile = "lighttpd.group"

#auth.backend.ldap.hostname = "localhost"
#auth.backend.ldap.base-dn  = "dc=my-domain,dc=com"
#auth.backend.ldap.filter   = "(uid=$)"

#auth.require               = ( "/server-status" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "user=jan"
#                               ),
#                               "/server-config" =>
#                               (
#                                 "method"  => "digest",
#                                 "realm"   => "download archiv",
#                                 "require" => "valid-user"
#                               )
#                             )

#### url handling modules (rewrite, redirect, access)
#url.rewrite                = ( "^/$"             => "/server-status" )
#url.redirect               = ( "^/wishlist/(.+)" => "http://www.123.org/$1" )
#### both rewrite/redirect support back reference to regex conditional using %n
#$HTTP["host"] =~ "^www\.(.*)" {
#  url.redirect            = ( "^/(.*)" => "http://%1/$1" )
#}

url.rewrite-once = (
    "^(/redfish/[^\?]*)\?" => "$1/",
    "^((/redfish)|(/redfish/.+[^/]))$" => "$1/")

# define a pattern for the host url finding
# %% => % sign
# %0 => domain name + tld
# %1 => tld
# %2 => domain name without tld
# %3 => subdomain 1 name
# %4 => subdomain 2 name
#
#evhost.path-pattern        = "/srv/www/vhosts/%3/htdocs/"

#### expire module
#expire.url                 = ( "/buggy/" => "access 2 hours", "/asdhas/" => "access plus 1 seconds 2 minutes")

#### ssi
#ssi.extension              = ( ".shtml" )

#### rrdtool
#rrdtool.binary             = "/usr/bin/rrdtool"
#rrdtool.db-name            = "/var/lib/lighttpd/lighttpd.rrd"

#### setenv
#setenv.add-request-header  = ( "TRAV_ENV" => "mysql://user@host/db" )
#setenv.add-response-header = ( "X-Secret-Message" => "42" )

## for mod_trigger_b4_dl
# trigger-before-download.gdbm-filename = "/var/lib/lighttpd/trigger.db"
# trigger-before-download.memcache-hosts = ( "127.0.0.1:11211" )
# trigger-before-download.trigger-url = "^/trigger/"
# trigger-before-download.download-url = "^/download/"
# trigger-before-download.deny-url = "http://127.0.0.1/index.html"
# trigger-before-download.trigger-timeout = 10

#### variable usage:
## variable name without "." is auto prefixed by "var." and becomes "var.bar"
#bar = 1
#var.mystring = "foo"

## integer add
#bar += 1
## string concat, with integer cast as string, result: "www.foo1.com"
#server.name = "www." + mystring + var.bar + ".com"
## array merge
#index-file.names = (foo + ".php") + index-file.names
#index-file.names += (foo + ".php")

#### include
#include /etc/lighttpd/lighttpd-inc.conf
include "/nv/lighttpd_port.conf"
include "/nv/lighttpd_http_ipv6_port.conf"
## same as above if you run: "lighttpd -f /etc/lighttpd/lighttpd.conf"
#include "lighttpd-inc.conf"

#### include_shell
#include_shell "echo var.a=1"
## the above is same as:
#var.a=1

#### disable TRACE and OPTIONS method
$HTTP["request-method"] =~ "^(TRACE|OPTIONS)$" {
    url.access-deny = ( "" )
}
/ #
